model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(history)
model %>% evaluate(X, Y)
model %>% predict_classes(X)
history
plot(history["loss"])
plot(history["loss"]~itr)
itr = 300
itr = 500
plot(history["loss"]~itr)
plot(history$loss~itr)
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
itr = 300
history <- model %>% fit(
X, Y,
epochs = itr,
validation_split = 0.3)
plot(history$loss ~ itr)
model %>% evaluate(X, Y)
history
class(history)
history.history['loss']
history$history['loss']
history$metrics["loss"]
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
itr = 300
history <- model %>% fit(
X, Y,
epochs = itr,
validation_split = 0.3)
plot(history$metrics["loss"])
model %>% evaluate(X, Y)
history$metrics["loss"]plot(history$metrics["loss"])
plot(history$metrics["loss"])
plot(history$metrics["loss"], itr)
history
history$params["epochs"]
plot(history$metrics["loss"], history$params["epochs"])
class(history$metrics["loss"])
class(history$params["epochs"])
plot(unlist(history$metrics["loss"]),
unlist(history$params["epochs"]))
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(unlist(history$metrics["loss"]),
unlist(history$params["epochs"]))
model %>% evaluate(X, Y)
unlist(history$metrics["loss"])
unlist(history$params["epochs"])
plot(history$metrics["loss"],
unlist(history$params["epochs"]))
plot(unlist(history$metrics["loss"]),
history$params["epochs"])
plot(unlist(history$metrics["loss"]),
unlist(1:history$params["epochs"]))
1:history$params["epochs"]
1:300
plot(unlist(history$metrics["loss"]),
unlist(1:300))
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(unlist(history$metrics["loss"]),
unlist(1:300))
model %>% evaluate(X, Y)
plot(unlist(history$metrics["loss"]),
+      unlist(1:300))
knitr::opts_chunk$set(echo = FALSE)
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Overlaying Graphs",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Overlaying Graphs",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
print('Accuracy of the model 92.48%')
col="blue")
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Overlaying Graphs",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Overlaying Graphs",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
print('Accuracy of the model 92.48%')
image(Fig.png)
image(Fig.png)
image("Fig.png")
library(imager)
file <- system.file('extdata/parrots.png',package='imager')
#system.file gives the full path for a file that ships with a R package
#if you already have the full path to the file you want to load just run:
#im <- load.image("/somedirectory/myfile.png")
im <- load.image(file)
plot(im)
install.packages("imager")
library(imager)
file <- system.file('extdata/parrots.png',package='imager')
#system.file gives the full path for a file that ships with a R package
#if you already have the full path to the file you want to load just run:
#im <- load.image("/somedirectory/myfile.png")
im <- load.image(file)
plot(im)
file <- system.file('Fig.png',package='imager')
im <- load.image(file)
plot(file)
library(imager)
file <- system.file('extdata/parrots.png',package='imager')
#system.file gives the full path for a file that ships with a R package
#if you already have the full path to the file you want to load just run:
#im <- load.image("Fig.png")
im <- load.image(file)
plot(im) #Parrots!
library(png)
#read file
img<-readPNG("Fig.png")
#get size
h<-dim(img)[1]
w<-dim(img)[2]
#open new file for output
png("out.png", width=w, height=h)
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
#fill plot with image
usr<-par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(.5,.5, "hello", cex=5, col=rgb(.2,.2,.2,.7))
#close image
dev.off()
library(png)
#read file
img<-readPNG("Fig.png")
#get size
h<-dim(img)[1]
w<-dim(img)[2]
#open new file for output
png("out.png", width=w, height=h)
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
#fill plot with image
usr<-par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(.5,.5, "hello", cex=5, col=rgb(.2,.2,.2,.7))
#close image
fpath <- system.file('Fig.png',package='imager')
im <- load.image(fpath)
plot(im)
shiny::runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
textOutput("value")
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
output$value1
input$radio
runApp('MachineLearning')
runApp()
runApp()
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Overlaying Graphs",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
print('Accuracy of the model 92.48%')
runApp('MachineLearning')
runApp('MachineLearning')
if(!exists("multiLayer", mode="function")) source("MultiLayerPerceptron.R")
runApp('MachineLearning')
source("MultiLayerPerceptron.R")
runApp('MachineLearning')
![Caption for the picture.](Fig.png)
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
img(src='Fig.png')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Loss graph",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Loss graph",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
library(keras)
heartPath <- 'heart.csv'
heart <- read.csv(heartPath)
X = heart[, 0:13]
Y = heart[, 13]
X <- data.matrix(X)
Y <- data.matrix(Y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, input_shape=13, activation='relu') %>%
layer_dense(units = 12, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 10, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 8, activation='sigmoid', use_bias = TRUE) %>%
layer_dense(units = 1, activation='sigmoid', use_bias = TRUE)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_adam(),
metrics = c('accuracy')
)
history <- model %>% fit(
X, Y,
epochs = 300,
validation_split = 0.3)
plot(unlist(1:300),
unlist(history$metrics["loss"]),
main="Loss graph",
xlab = "Iteration",
ylab="Loss",
type="l",
col="blue")
print('Accuracy of the model 92.48%')
history
class(history)
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
cat('Trained on 212 samples (batch_size=32, epochs=300)
\nFinal epoch (plot to see history):
\n\tloss: -20.51
\n\taccuracy: 92.58%
\n\tval_loss: -24.3
\n\tval_accuracy: 87.64')
cat('Trained on 212 samples (batch_size=32, epochs=300)
Final epoch (plot to see history):
\tloss: -20.51
\taccuracy: 92.58%
\tval_loss: -24.3
\tval_accuracy: 87.64')
cat('Trained on 212 samples (batch_size=32, epochs=300)
Final epoch (plot to see history):
loss: -20.51
accuracy: 92.58%
val_loss: -24.3
val_accuracy: 87.64'))
cat('Trained on 212 samples (batch_size=32, epochs=300)
Final epoch (plot to see history):
loss: -20.51
accuracy: 92.58%
val_loss: -24.3
val_accuracy: 87.64')
cat('Trained on 212 samples (batch_size=32, epochs=300)
Final epoch (plot to see history):
loss: -20.51
accuracy: 92.58%
val_loss: -24.3
val_accuracy: 87.64')
runApp('MachineLearning')
history
runApp('MachineLearning')
runApp('MachineLearning')
View(history)
View(history)
View(history)
class(history)
history
NeuralOutput <- read.delim("~/DataScienceCoursera/RPackages/Project/NeuralOutput.txt", header=FALSE)
View(NeuralOutput)
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
runApp('MachineLearning')
shiny::runApp('MachineLearning')
library(data.table)
library(rCharts)
library(reshape2)
dt <- fread('data/events.agg.csv')
dt.agg.year <- dt[, list(Count=sum(COUNT), Injuries=sum(INJURIES), Fatalities=sum(FATALITIES)), by=list(YEAR)]
library(data.table)
library(rCharts)
library(reshape2)
dt <- fread('/shiny-app/data/events.agg.csv')
dt.agg.year <- dt[, list(Count=sum(COUNT), Injuries=sum(INJURIES), Fatalities=sum(FATALITIES)), by=list(YEAR)]
library(data.table)
library(rCharts)
library(reshape2)
dt <- fread('/Users/ashwini/DataScienceCoursera/RPackages/Project/shiny-app/data/events.agg.csv')
dt.agg.year <- dt[, list(Count=sum(COUNT), Injuries=sum(INJURIES), Fatalities=sum(FATALITIES)), by=list(YEAR)]
library(data.table)
library(rCharts)
library(reshape2)
install.packages("rCharts")
runApp('shiny-app')
runApp('shiny-app')
date
runApp('shiny-app')
runApp('shiny-app')
runApp('shiny-app')
Sys.Date()
